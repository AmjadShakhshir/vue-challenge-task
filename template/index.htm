<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
		<link rel="stylesheet" href="main.css">
		<style>
			* {
				font-family: 'Roboto';
			}
		</style>
		<title>
			Restaurant Manager
		</title>
	</head>
	<body>
		<div id="app">
			{ message }
		</div>
		<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
		<script>
			Vue.component('x-table', {
            props: ['cell'],
            template: `
                <div :class="{'cell-item': !cell.occupied, 'occupied': cell.occupied}">
                    <p v-if="cell.occupied">Occupied By {{cell.numberOfOccupants}}</p>
                    <p v-if="cell.occupied">(free in {{cell.timeDifference}})</p>
                    <p v-else>Table Available</p>
                    <p v-if="!cell.occupied">(Capacity: {{ cell.capacity }})</p>
                    <button
                        class="btn"
                        v-if="cell.occupied" 
                        @click="cell.occupied = false"
                    >Evict</button>
                </div>
				`
			});

			Vue.component('x-restaurant', {
            props: ['cells'],
            methods: {
                getClassName(cell) {
                    return `cell-row-${Math.ceil(cell.id / 4)}`;
                }
            },
            template: `
                <div id="x-resturant">
                    <h1>Restaurant Manager</h1>
                    <h3>Tables Overview</h3>
                    <div class="table">
                        <div v-for="cell in cells" :class="getClassName(cell)">
                            <x-table :cell="cell"></x-table>
                        </div>
                    </div>
                </div>
				`
			});

			const app = new Vue({
				el: '#app',
				el: '#app',
                data: {
                    cells: [
                        {
                            id: 1,
                            name: 'Table 1',
                            numberOfOccupants: null,
                            occupied: false,
                            capacity: 10,
                            availableTime: "Sun Mar 03 2024 23:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        },
                        {
                            id: 2,
                            name: 'Table 2',
                            numberOfOccupants: null,
                            occupied: false,
                            capacity: 8,
                            availableTime: "Sun Mar 03 2024 22:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        },
                        {
                            id: 3,
                            name: 'Table 3',
                            numberOfOccupants: 6,
                            occupied: true,
                            capacity: 10,
                            availableTime: "Sun Mar 03 2024 22:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        },
                        {
                            id: 4,
                            name: 'Table 4',
                            numberOfOccupants: 4,
                            occupied: true,
                            capacity: 6,
                            availableTime: "Sun Mar 03 2024 22:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        },
                        {
                            id: 5,
                            name: 'Table 5',
                            numberOfOccupants: null,
                            occupied: false,
                            capacity: 2,
                            availableTime: "Sun Mar 03 2024 22:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        },
                        {
                            id: 6,
                            name: 'Table 6',
                            numberOfOccupants: null,
                            occupied: false,
                            capacity: 6,
                            availableTime: "Sun Mar 03 2024 22:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        },
                        {
                            id: 7,
                            name: 'Table 7',
                            numberOfOccupants: null,
                            occupied: false,
                            capacity: 4,
                            availableTime: "Sun Mar 03 2024 22:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        },
                        {
                            id: 8,
                            name: 'Table 8',
                            numberOfOccupants: null,
                            occupied: true,
                            capacity: 12,
                            availableTime: "Sun Mar 03 2024 23:43:53 GMT+0200 (Eastern European Standard Time)",
                            timeDifference: null
                        }
                    ]
                },
				methods: {
                    getTimeDifference(cell) {
                        if (!cell.availableTime) {
                            return 'Loading...';
                        }
                        const now = new Date();
                        const diffInMilliseconds = new Date(cell.availableTime) - now;
                        if (diffInMilliseconds <= 0) {
                            cell.occupied = false;
                            return '0 : 0';
                        }
                        const diffInSeconds = Math.floor(diffInMilliseconds / 1000);
                        const diffInMinutes = Math.floor(diffInSeconds / 60);
                        const diffInHours = Math.floor(diffInMinutes / 60);
                        return  diffInMinutes % 60 + ' : ' + diffInSeconds % 60;
                    }
                },
                created() {
                    setInterval(() => {
                        this.cells.forEach(cell => {
                            cell.timeDifference = this.getTimeDifference(cell);
                        });
                    }, 1000);
                },
				delimiters: ['{', '}'],
			});
		</script>
	</body>
</html>