<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Restaurant Table Management with Async/Await</title>
    <style>
        body { font-family: 'Arial', sans-serif; }
        #app-wrapper {
                margin: 0 auto;
                width: 900px;
            }
        .tables {
                display: grid;
                grid-template-columns: repeat(4, 1fr);
                grid-template-rows: 1fr 1fr;
                grid-template-areas:
                "row1 row1 row1 row1"
                "row2 row2 row2 row2";
                border: 3px solid red;
                padding: 20px 10px;
                gap: 10px;
            }
        .table { width: 150px; margin: 15px; padding: 10px; border: 1px solid #000; }
        .available { background-color: #fff; }
        .occupied { background-color: #faf4fb; border: 3px solid #ddd1ee; color: #673ab7}
        .table-info { margin: 10px 0; }
        .add-table {
            margin-top: 60px;
            padding: 20px;
            border: 1px solid #ddd1ee;
            background-color: #faf4fb;
        }
        .add-table form {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        .add-table input {
            margin: 10px;
            padding: 10px 0;
            width: 90%;
        }
        button { margin-top: 10px; }
        .error { color: red; }
        .evict {
            background-color: #e2c1e8;
                border: none;
                color: #673ab7;
                padding: 15px 32px;
                text-align: center;
                text-decoration: none;
                display: flex;
                justify-content: center;
                align-items: center;
                font-size: 16px;
                margin: 4px 2px;
                cursor: pointer;
                width: 100%;
                height: 30px;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #09f;
            animation: spin 1s ease infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
<div id="app">
    <div id="app-wrapper">
        <div v-if="isLoading" class="loading-indicator">Allocating table, please wait...</div>
        <div class="restaurant">
            <h1>Restaurant Table Management</h1>
            <h2>Tables Overview</h2>
            <x-restaurant class="tables" ref="restaurant" :tables="tables" @update-tables="saveState"></x-restaurant>
        </div>
        <form class="add-table" @submit.prevent="attemptToAllocateTable">
            <label for="partySize">Party Size:</label>
            <input type="number" id="partySize" v-model.number="partySize" placeholder="Number of People (non-zero positive integer)" required min="1" max="12">
            <input type="datetime-local" placeholder="Duration of stay in seconds (positive number)">
            <input type="text" placeholder="Fuss message if evicted (text)">
            <p class="error" v-if="errorMessage">{{ errorMessage }}</p>
            <button type="submit" class="btn btn-primary" :disabled="isLoading">
                <div v-if="isLoading" class="spinner"></div>
                <div v-else>Add</div>
            </button>
            <p class="error" v-if="showError">Please enter a valid party size.</p>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script>
Vue.component('x-table', {
    props: ['table'],
    computed: {
        // Computes the availability status to display
        availabilityStatus() {
            return this.table.occupied ? 'Occupied by ' + this.table.occupants : 'Table Available';
        },
        // Display when the table will become available next, without dynamic countdowns
        availableAt() {
            if (!this.table.availableTime || !this.table.occupied) return '';
            const availableTime = new Date(this.table.availableTime);
            return 'Available at ' + availableTime.toLocaleTimeString();
        },
    },
    methods: {
        // Simulate an async wait until the table becomes available
        async untilAvailable() {
            if (!this.table.occupied) return Promise.resolve();
            return new Promise(resolve => {
                const unwatch = this.$watch('table.occupied', newValue => {
                    if (!newValue) {
                        unwatch();
                        resolve();
                    }
                });
            });
        },
    },
    template: `
    <div class="table" :class="{available: !table.occupied, occupied: table.occupied}">
        <div class="table-info">{{ availabilityStatus }}</div>
        <div class="table-info" v-if="table.occupied">{{ availableAt }}</div>
        <button class="evict" v-if="table.occupied" @click="$emit('evict', table)">Evict</button>
    </div>
`
});

Vue.component('x-restaurant', {
    props: ['tables'],
    methods: {
        evictTable(table) {
            console.log("Evicting occupants...");
            table.occupied = false;
            table.occupants = 0;
            this.$emit('update-tables');
            this.markAsAvailable();
        },
        markAsAvailable() {
            // Logic to mark the table as available...
            this.$emit('tableAvailable', this.table);
            alert("Table is now available!");
        },
        handleTableAvailable() {
            // Define your method here...
        },
        // Adjusted to loop through tables and find an available one
        async awaitTable(partySize) {
            // Checks immediately for an available table that fits the party size
            let suitableTable = this.tables.find(table => !table.occupied && table.capacity >= partySize);
            if (suitableTable) return suitableTable;

            // Waits for a table to become available
            await new Promise(resolve => {
                const unwatch = this.$watch(
                            () => this.tables.filter(table => !table.occupied && table.capacity >= partySize),
                            (newVal) => {
                                if (newVal.length > 0) {
                                    unwatch(); // Stop watching once we have an available table
                                    resolve();
                        }
                    },
                    { deep: true } // This is important for watching nested data
                );
            });

            // After a table becomes available, finds the first suitable table
            return this.tables.find(table => !table.occupied && table.capacity >= partySize);
        },
    },
    template: `
        <div>
            <x-table v-for="(table, index) in tables" :key="index" :table="table" @evict="evictTable(table)" @tableAvailable="handleTableAvailable"></x-table>
        </div>
    `
});

new Vue({
    el: '#app',
    data: {
        partySize: 1,
        availableTime: null,
        showError: false,
        tables: [],
        isLoading: false,
        errorMessage: '',
    },
    mounted() {
        this.loadState();
    },
    methods: {
        validatePartySize(size) {
            if (size < 1 || size > 12 || !Number.isInteger(size)) {
                this.errorMessage = "Please enter a valid party size (1-12).";
                return false;
            }
            this.errorMessage = '';
            return true;
        },
        showSuccessToast(message) {
            // Implementation to show success message
        },
        showErrorToast(message) {
            // Implementation to show error message
        },
        async attemptToAllocateTable() {
            if (!this.validatePartySize(this.partySize)) {
                this.showError = true;
                this.isLoading = false;
                return;
            }
            this.showError = false;
            this.isLoading = true;
            
            // Attempt to allocate a table based on party size
            const table = await this.$refs.restaurant.awaitTable(this.partySize);
            if (table) {
                table.occupied = true;
                table.occupants = this.partySize;
                alert("Table allocated successfully!");
            } else {
                alert("Unable to allocate a table at this time.");
            }
            this.isLoading = false;
            this.saveState();
        },
        saveState() {
            localStorage.setItem('tables', JSON.stringify(this.tables));
        },
        loadState() {
            const savedTables = localStorage.getItem('tables');
            if (savedTables) {
                this.tables = JSON.parse(savedTables);
            } else {
                this.tables = Array.from({ length: 8 }, (_, index) => ({
                    id: index,
                    capacity: [10, 8, 10, 6, 2, 6, 4, 12][index],
                    occupied: false,
                    occupants: 0
                }));
            }
        }
    }
});
</script>
</body>
</html>
